#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <10>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        Layer-0 {
            bindings = <
&kp ESC              &kp N1  &kp N2     &kp N3    &kp N4     &kp N5    &kp LS(LC(LG(LA(A))))  &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &kp DELETE
&kp TAB              &kp Q   &kp W      &kp E     &kp R      &kp T     &kp LS(LA(LC(LG(C))))  &kp Y   &kp U      &kp I      &kp O     &kp P     &kp BSPC
&mt LEFT_SHIFT CAPS  &kp A   &kp S      &kp D     &kp F      &kp G     &kp LS(LG(LA(LC(B))))  &kp H   &kp J      &kp K      &kp L     &kp SEMI  &kp APOS
&kp LCTRL            &kp Z   &kp X      &kp C     &kp V      &kp B     &kp LS(LA(LC(LG(D))))  &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&mo 4                &mo 2   &kp LSHFT  &kp LALT  &kp SPACE  &mo 1     &kp LA(LS(LC(LG(X))))  &mo 1   &kp ENTER  &kp LBKT   &kp RBKT  &kp BSLH
            >;

            display-name = "LAYER0";
            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        layer_1 {
            bindings = <
&kp ENTER  &kp N0     &kp N9            &kp N8         &kp N7     &kp N6      &kp LS(LA(LC(LG(E))))  &trans  &trans          &trans          &kp MINUS        &kp EQUAL  &kp BSPC
&kp BSPC   &kp DOT    &mt UP DOWN       &kp MINUS      &kp EQUAL  &kp P       &kp LS(LA(LC(LG(G))))  &trans  &trans          &mmv MOVE_UP    &trans           &trans     &trans
&kp DEL    &kp LEFT   &msc MOVE_Y(10)   &kp RIGHT      &mt F3 F1  &kp H       &kp LS(LG(LC(LA(F))))  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans     &trans
&kp LC(N)  &kp LC(O)  &msc MOVE_Y(-10)  &kp LC(M)      &mt O I    &kp BSLH    &kp LC(LG(LS(LA(H))))  &trans  &trans          &trans          &trans           &trans     &trans
&trans     &trans     &kp LC(E)         &mt RBKT LBKT  &kp F10    &trans      &kp LS(LA(LC(LG(C))))  &trans  &trans          &trans          &trans           &kp RSHFT
            >;

            display-name = "layer1";
        };

        layer_5 {
            bindings = <
&kp N1             &kp N2             &kp N3             &kp N4             &kp N5             &kp N6               &trans  &trans  &trans   &trans     &trans  &trans  &trans
&kp LS(LA(LC(Q)))  &kp LA(LC(LS(W)))  &kp LA(LS(LC(E)))  &kp LG(E)          &kp LS(LA(LC(R)))  &kp LA(LC(LS(T)))    &trans  &trans  &trans   &trans     &trans  &trans  &trans
&kp LA(LS(LC(A)))  &kp LC(LA(LS(S)))  &kp LA(LS(LC(D)))  &kp LG(D)          &kp LC(LA(LS(F)))  &kp LG(L)            &trans  &trans  &kp DOT  &kp COMMA  &trans  &trans  &trans
&kp LC(LA(LS(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LC(LA(LS(V)))  &kp LC(LA(LS(B)))  &kp LC(LA(LS(N)))    &trans  &trans  &trans   &trans     &trans  &trans  &trans
&trans             &trans             &trans             &trans             &trans             &trans               &trans  &trans  &trans   &trans     &trans  &trans
            >;

            label = "Maya";
        };

        layer_6 {
            display-name = "layer_6_Yingpin";
            bindings = <
&kp LS(LA(LC(F1)))  &kp LA(LC(LS(F2)))  &kp LS(LA(LC(F3)))  &kp LA(LC(LS(F4)))   &kp LC(LA(LS(F5)))   &kp LS(LC(LA(F6)))     &trans  &trans  &trans  &trans  &kp F1   &kp F2     &kp F3
&kp LS(LC(LA(F7)))  &kp LS(LA(LC(F8)))  &msc MOVE_Y(10)     &kp LC(LA(LS(F10)))  &kp LS(LC(LA(F11)))  &kp LS(LC(LA(F12)))    &trans  &kp N7  &kp N8  &kp N9  &kp F4   &kp F5     &kp F6
&kp LS(LC(LA(Q)))   &kp LA(LC(LS(W)))   &msc MOVE_Y(-10)    &kp LS(LC(LA(R)))    &kp LA(LC(LS(T)))    &kp LC(LS(LA(Y)))      &trans  &kp N4  &kp N5  &kp N6  &kp F7   &kp F8     &kp F9
&kp LS(LA(LC(U)))   &kp LS(LA(LC(I)))   &kp LS(LA(LC(O)))   &kp LS(LA(LC(P)))    &kp LA(LS(LC(A)))    &kp LA(LC(LS(S)))      &trans  &kp N1  &kp N2  &kp N3  &kp F10  &kp F11    &kp F12
&trans              &kp LA(LC(LS(D)))   &kp LS(LA(LC(F)))   &kp LA(LS(LC(G)))    &kp LA(LC(LS(H)))    &kp LS(LA(LC(J)))      &trans  &trans  &trans  &kp N0  &kp DOT  &kp ENTER
            >;
        };

        layer_8 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&to 0         &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Lanya";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
